/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Tspec API
 * OpenAPI spec version: 0.0.1
 */
import {useQuery, useMutation} from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  UsersApiSpecPostUsersSendAuth201,
  UsersApiSpecPostUsersSendAuthBody,
  UsersApiSpecPostUsersVerifyAuth201,
  UsersApiSpecPostUsersVerifyAuthBody,
  UsersApiSpecPutUserForgotPassword200,
  UsersApiSpecPutUserForgotPasswordBody,
  UsersApiSpecPutUserChangePassword200,
  UsersApiSpecPutUserChangePasswordBody,
  UsersApiSpecPostUsersSignup201,
  UsersApiSpecPostUsersSignupBody,
  UsersApiSpecPostUsersSignin201,
  UsersApiSpecPostUsersSigninBody,
  UsersApiSpecPostUsersCheck200,
  UsersApiSpecPostUsersCheckBody,
  UsersApiSpecDeleteUsers204,
  UsersApiSpecGetUsers200,
  UsersApiSpecGetUsersRenew200,
} from '../../model';
import {customInstance} from '../../../api/Instance';
import type {ErrorType} from '../../../api/Instance';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Ïú†Ï†Ä Ìï∏ÎìúÌè∞ Ïù∏Ï¶ù Î©îÏÑ∏ÏßÄ Ï†ÑÏÜ°
 */
export const usersApiSpecPostUsersSendAuth = (
  usersApiSpecPostUsersSendAuthBody: UsersApiSpecPostUsersSendAuthBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPostUsersSendAuth201>(
    {
      url: `/users/send-auth`,
      method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPostUsersSendAuthBody,
    },
    options,
  );
};

export const getUsersApiSpecPostUsersSendAuthMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSendAuth>>,
    TError,
    {data: UsersApiSpecPostUsersSendAuthBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSendAuth>>,
  TError,
  {data: UsersApiSpecPostUsersSendAuthBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSendAuth>>,
    {data: UsersApiSpecPostUsersSendAuthBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPostUsersSendAuth(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPostUsersSendAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSendAuth>>
>;
export type UsersApiSpecPostUsersSendAuthMutationBody = UsersApiSpecPostUsersSendAuthBody;
export type UsersApiSpecPostUsersSendAuthMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä Ìï∏ÎìúÌè∞ Ïù∏Ï¶ù Î©îÏÑ∏ÏßÄ Ï†ÑÏÜ°
 */
export const useUsersApiSpecPostUsersSendAuth = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSendAuth>>,
    TError,
    {data: UsersApiSpecPostUsersSendAuthBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPostUsersSendAuthMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä Ìï∏ÎìúÌè∞ Ïù∏Ï¶ù Î©îÏÑ∏ÏßÄ ÌôïÏù∏
 */
export const usersApiSpecPostUsersVerifyAuth = (
  usersApiSpecPostUsersVerifyAuthBody: UsersApiSpecPostUsersVerifyAuthBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPostUsersVerifyAuth201>(
    {
      url: `/users/verify-auth`,
      method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPostUsersVerifyAuthBody,
    },
    options,
  );
};

export const getUsersApiSpecPostUsersVerifyAuthMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersVerifyAuth>>,
    TError,
    {data: UsersApiSpecPostUsersVerifyAuthBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPostUsersVerifyAuth>>,
  TError,
  {data: UsersApiSpecPostUsersVerifyAuthBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPostUsersVerifyAuth>>,
    {data: UsersApiSpecPostUsersVerifyAuthBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPostUsersVerifyAuth(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPostUsersVerifyAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPostUsersVerifyAuth>>
>;
export type UsersApiSpecPostUsersVerifyAuthMutationBody = UsersApiSpecPostUsersVerifyAuthBody;
export type UsersApiSpecPostUsersVerifyAuthMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä Ìï∏ÎìúÌè∞ Ïù∏Ï¶ù Î©îÏÑ∏ÏßÄ ÌôïÏù∏
 */
export const useUsersApiSpecPostUsersVerifyAuth = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersVerifyAuth>>,
    TError,
    {data: UsersApiSpecPostUsersVerifyAuthBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPostUsersVerifyAuthMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûäÏñ¥Î≤ÑÎ¶¥ Ïãú ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export const usersApiSpecPutUserForgotPassword = (
  usersApiSpecPutUserForgotPasswordBody: UsersApiSpecPutUserForgotPasswordBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPutUserForgotPassword200>(
    {
      url: `/user/forgot-password`,
      method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPutUserForgotPasswordBody,
    },
    options,
  );
};

export const getUsersApiSpecPutUserForgotPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPutUserForgotPassword>>,
    TError,
    {data: UsersApiSpecPutUserForgotPasswordBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPutUserForgotPassword>>,
  TError,
  {data: UsersApiSpecPutUserForgotPasswordBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPutUserForgotPassword>>,
    {data: UsersApiSpecPutUserForgotPasswordBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPutUserForgotPassword(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPutUserForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPutUserForgotPassword>>
>;
export type UsersApiSpecPutUserForgotPasswordMutationBody = UsersApiSpecPutUserForgotPasswordBody;
export type UsersApiSpecPutUserForgotPasswordMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûäÏñ¥Î≤ÑÎ¶¥ Ïãú ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export const useUsersApiSpecPutUserForgotPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPutUserForgotPassword>>,
    TError,
    {data: UsersApiSpecPutUserForgotPasswordBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPutUserForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞
 */
export const usersApiSpecPutUserChangePassword = (
  usersApiSpecPutUserChangePasswordBody: UsersApiSpecPutUserChangePasswordBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPutUserChangePassword200>(
    {
      url: `/user/change-password`,
      method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPutUserChangePasswordBody,
    },
    options,
  );
};

export const getUsersApiSpecPutUserChangePasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPutUserChangePassword>>,
    TError,
    {data: UsersApiSpecPutUserChangePasswordBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPutUserChangePassword>>,
  TError,
  {data: UsersApiSpecPutUserChangePasswordBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPutUserChangePassword>>,
    {data: UsersApiSpecPutUserChangePasswordBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPutUserChangePassword(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPutUserChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPutUserChangePassword>>
>;
export type UsersApiSpecPutUserChangePasswordMutationBody = UsersApiSpecPutUserChangePasswordBody;
export type UsersApiSpecPutUserChangePasswordMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞
 */
export const useUsersApiSpecPutUserChangePassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPutUserChangePassword>>,
    TError,
    {data: UsersApiSpecPutUserChangePasswordBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPutUserChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const usersApiSpecPostUsersSignup = (
  usersApiSpecPostUsersSignupBody: UsersApiSpecPostUsersSignupBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPostUsersSignup201>(
    {
      url: `/users/signup`,
      method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPostUsersSignupBody,
    },
    options,
  );
};

export const getUsersApiSpecPostUsersSignupMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignup>>,
    TError,
    {data: UsersApiSpecPostUsersSignupBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSignup>>,
  TError,
  {data: UsersApiSpecPostUsersSignupBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignup>>,
    {data: UsersApiSpecPostUsersSignupBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPostUsersSignup(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPostUsersSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSignup>>
>;
export type UsersApiSpecPostUsersSignupMutationBody = UsersApiSpecPostUsersSignupBody;
export type UsersApiSpecPostUsersSignupMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useUsersApiSpecPostUsersSignup = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignup>>,
    TError,
    {data: UsersApiSpecPostUsersSignupBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPostUsersSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const usersApiSpecPostUsersSignin = (
  usersApiSpecPostUsersSigninBody: UsersApiSpecPostUsersSigninBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPostUsersSignin201>(
    {
      url: `/users/signin`,
      method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPostUsersSigninBody,
    },
    options,
  );
};

export const getUsersApiSpecPostUsersSigninMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignin>>,
    TError,
    {data: UsersApiSpecPostUsersSigninBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSignin>>,
  TError,
  {data: UsersApiSpecPostUsersSigninBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignin>>,
    {data: UsersApiSpecPostUsersSigninBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPostUsersSignin(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPostUsersSigninMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPostUsersSignin>>
>;
export type UsersApiSpecPostUsersSigninMutationBody = UsersApiSpecPostUsersSigninBody;
export type UsersApiSpecPostUsersSigninMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const useUsersApiSpecPostUsersSignin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersSignin>>,
    TError,
    {data: UsersApiSpecPostUsersSigninBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPostUsersSigninMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïù¥Î©îÏùº Ï§ëÎ≥µÏ≤¥ÌÅ¨
 */
export const usersApiSpecPostUsersCheck = (
  usersApiSpecPostUsersCheckBody: UsersApiSpecPostUsersCheckBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UsersApiSpecPostUsersCheck200>(
    {
      url: `/users/check`,
      method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: usersApiSpecPostUsersCheckBody,
    },
    options,
  );
};

export const getUsersApiSpecPostUsersCheckMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersCheck>>,
    TError,
    {data: UsersApiSpecPostUsersCheckBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecPostUsersCheck>>,
  TError,
  {data: UsersApiSpecPostUsersCheckBody},
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecPostUsersCheck>>,
    {data: UsersApiSpecPostUsersCheckBody}
  > = props => {
    const {data} = props ?? {};

    return usersApiSpecPostUsersCheck(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecPostUsersCheckMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecPostUsersCheck>>
>;
export type UsersApiSpecPostUsersCheckMutationBody = UsersApiSpecPostUsersCheckBody;
export type UsersApiSpecPostUsersCheckMutationError = ErrorType<unknown>;

/**
 * @summary Ïù¥Î©îÏùº Ï§ëÎ≥µÏ≤¥ÌÅ¨
 */
export const useUsersApiSpecPostUsersCheck = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecPostUsersCheck>>,
    TError,
    {data: UsersApiSpecPostUsersCheckBody},
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecPostUsersCheckMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÌÉàÌá¥
 */
export const usersApiSpecDeleteUsers = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<UsersApiSpecDeleteUsers204>({url: `/users`, method: 'delete'}, options);
};

export const getUsersApiSpecDeleteUsersMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecDeleteUsers>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiSpecDeleteUsers>>,
  TError,
  TVariables,
  TContext
> => {
  const {mutation: mutationOptions, request: requestOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiSpecDeleteUsers>>,
    TVariables
  > = () => {
    return usersApiSpecDeleteUsers(requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UsersApiSpecDeleteUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecDeleteUsers>>
>;

export type UsersApiSpecDeleteUsersMutationError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÌÉàÌá¥
 */
export const useUsersApiSpecDeleteUsers = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiSpecDeleteUsers>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUsersApiSpecDeleteUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏ÏïÑÏõÉ
 */
export const usersApiSpecGetUsers = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UsersApiSpecGetUsers200>({url: `/users`, method: 'get', signal}, options);
};

export const getUsersApiSpecGetUsersQueryKey = () => [`/users`] as const;

export const getUsersApiSpecGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiSpecGetUsers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsers>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiSpecGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiSpecGetUsers>>> = ({signal}) =>
    usersApiSpecGetUsers(requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type UsersApiSpecGetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecGetUsers>>
>;
export type UsersApiSpecGetUsersQueryError = ErrorType<unknown>;

/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏ÏïÑÏõÉ
 */
export const useUsersApiSpecGetUsers = <
  TData = Awaited<ReturnType<typeof usersApiSpecGetUsers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsers>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getUsersApiSpecGetUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const usersApiSpecGetUsersRenew = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UsersApiSpecGetUsersRenew200>(
    {url: `/users/renew`, method: 'get', signal},
    options,
  );
};

export const getUsersApiSpecGetUsersRenewQueryKey = () => [`/users/renew`] as const;

export const getUsersApiSpecGetUsersRenewQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiSpecGetUsersRenewQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>> = ({
    signal,
  }) => usersApiSpecGetUsersRenew(requestOptions, signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type UsersApiSpecGetUsersRenewQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>
>;
export type UsersApiSpecGetUsersRenewQueryError = ErrorType<unknown>;

/**
 * @summary ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const useUsersApiSpecGetUsersRenew = <
  TData = Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof usersApiSpecGetUsersRenew>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getUsersApiSpecGetUsersRenewQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};
